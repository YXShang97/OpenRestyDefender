
#user  nobody;
worker_processes  1;

error_log  /opt/homebrew/var/log/nginx/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /opt/homebrew/var/log/nginx/access.log;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    upstream backend {
        server localhost:8080;
        server localhost:8081;
    }
    init_by_lua_block  {
        cjson = require("cjson")
    }
    server {
        listen       999;
        server_name  messaging.com;
        #localhost:8080/
        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        location / {
            rewrite_by_lua_block {
                 local sock = ngx.socket.tcp()
                 local ok, err = sock:connect("127.0.0.1", 6666) 
                 if not ok then
                     ngx.status = 502
                     ngx.say("failed to connect server: ", err)
                     return
                 end
                 local ip = ngx.var.remote_addr;
                 local uri = ngx.var.uri;
                 local loginToken = ngx.req.get_headers()['Login-Token'];
                 if loginToken == nil then
                    loginToken = "";
                 end
                 local request = ip .. ";" .. uri .. ";" .. "Login-Token="..loginToken .. "\n"; 
                 local bytes, err = sock:send(request)
                 local line, err, partial = sock:receive()
                 if not line then
                     ngx.say("failed to read a line: ", err)
                     return
                 end
                 sock:close()
                 if line == 'N' then
                    ngx.status = 403
                    local data = {code=4003, message='Forbidden'} 
                    local output = cjson.encode(data)
                    ngx.header["Content-type"] = 'application/json'
                    ngx.say(output)
                    ngx.exit(ngx.OK)
                 end
            }
            proxy_pass http://backend;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}


